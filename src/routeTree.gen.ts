/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as privateIndexRouteImport } from './routes/(private)/index'
import { Route as publicGridLayoutRouteImport } from './routes/(public)/_grid-layout'
import { Route as privateUnscopedRouteImport } from './routes/(private)/_unscoped'
import { Route as publicGridLayoutServerActivationRouteImport } from './routes/(public)/_grid-layout/server-activation'
import { Route as publicGridLayoutLoginRouteImport } from './routes/(public)/_grid-layout/login'
import { Route as privateUnscopedProjectsRouteImport } from './routes/(private)/_unscoped/projects'
import { Route as privateUnscopedComponentsIndexRouteImport } from './routes/(private)/_unscoped/components/index'
import { Route as privateUnscopedSettingsMembersRouteImport } from './routes/(private)/_unscoped/settings/members'
import { Route as privateUnscopedSettingsGeneralRouteImport } from './routes/(private)/_unscoped/settings/general'
import { Route as privateScopedProjectsProject_idRouteImport } from './routes/(private)/_scoped/projects/$project_id'

const publicRouteImport = createFileRoute('/(public)')()
const privateRouteImport = createFileRoute('/(private)')()
const privateScopedProjectsProject_idIndexLazyRouteImport = createFileRoute(
  '/(private)/_scoped/projects/$project_id/',
)()

const publicRoute = publicRouteImport.update({
  id: '/(public)',
  getParentRoute: () => rootRouteImport,
} as any)
const privateRoute = privateRouteImport.update({
  id: '/(private)',
  getParentRoute: () => rootRouteImport,
} as any)
const privateIndexRoute = privateIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => privateRoute,
} as any)
const publicGridLayoutRoute = publicGridLayoutRouteImport.update({
  id: '/_grid-layout',
  getParentRoute: () => publicRoute,
} as any)
const privateUnscopedRoute = privateUnscopedRouteImport
  .update({
    id: '/_unscoped',
    getParentRoute: () => privateRoute,
  } as any)
  .lazy(() => import('./routes/(private)/_unscoped.lazy').then((d) => d.Route))
const publicGridLayoutServerActivationRoute =
  publicGridLayoutServerActivationRouteImport
    .update({
      id: '/server-activation',
      path: '/server-activation',
      getParentRoute: () => publicGridLayoutRoute,
    } as any)
    .lazy(() =>
      import('./routes/(public)/_grid-layout/server-activation.lazy').then(
        (d) => d.Route,
      ),
    )
const publicGridLayoutLoginRoute = publicGridLayoutLoginRouteImport
  .update({
    id: '/login',
    path: '/login',
    getParentRoute: () => publicGridLayoutRoute,
  } as any)
  .lazy(() =>
    import('./routes/(public)/_grid-layout/login.lazy').then((d) => d.Route),
  )
const privateUnscopedProjectsRoute = privateUnscopedProjectsRouteImport
  .update({
    id: '/projects',
    path: '/projects',
    getParentRoute: () => privateUnscopedRoute,
  } as any)
  .lazy(() =>
    import('./routes/(private)/_unscoped/projects.lazy').then((d) => d.Route),
  )
const privateUnscopedComponentsIndexRoute =
  privateUnscopedComponentsIndexRouteImport
    .update({
      id: '/components/',
      path: '/components/',
      getParentRoute: () => privateUnscopedRoute,
    } as any)
    .lazy(() =>
      import('./routes/(private)/_unscoped/components/index.lazy').then(
        (d) => d.Route,
      ),
    )
const privateUnscopedSettingsMembersRoute =
  privateUnscopedSettingsMembersRouteImport
    .update({
      id: '/settings/members',
      path: '/settings/members',
      getParentRoute: () => privateUnscopedRoute,
    } as any)
    .lazy(() =>
      import('./routes/(private)/_unscoped/settings/members.lazy').then(
        (d) => d.Route,
      ),
    )
const privateUnscopedSettingsGeneralRoute =
  privateUnscopedSettingsGeneralRouteImport.update({
    id: '/settings/general',
    path: '/settings/general',
    getParentRoute: () => privateUnscopedRoute,
  } as any)
const privateScopedProjectsProject_idRoute =
  privateScopedProjectsProject_idRouteImport
    .update({
      id: '/_scoped/projects/$project_id',
      path: '/projects/$project_id',
      getParentRoute: () => privateRoute,
    } as any)
    .lazy(() =>
      import('./routes/(private)/_scoped/projects/$project_id.lazy').then(
        (d) => d.Route,
      ),
    )
const privateScopedProjectsProject_idIndexLazyRoute =
  privateScopedProjectsProject_idIndexLazyRouteImport
    .update({
      id: '/',
      path: '/',
      getParentRoute: () => privateScopedProjectsProject_idRoute,
    } as any)
    .lazy(() =>
      import('./routes/(private)/_scoped/projects/$project_id/index.lazy').then(
        (d) => d.Route,
      ),
    )

export interface FileRoutesByFullPath {
  '/': typeof privateIndexRoute
  '/projects': typeof privateUnscopedProjectsRoute
  '/login': typeof publicGridLayoutLoginRoute
  '/server-activation': typeof publicGridLayoutServerActivationRoute
  '/projects/$project_id': typeof privateScopedProjectsProject_idRouteWithChildren
  '/settings/general': typeof privateUnscopedSettingsGeneralRoute
  '/settings/members': typeof privateUnscopedSettingsMembersRoute
  '/components': typeof privateUnscopedComponentsIndexRoute
  '/projects/$project_id/': typeof privateScopedProjectsProject_idIndexLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof privateIndexRoute
  '/projects': typeof privateUnscopedProjectsRoute
  '/login': typeof publicGridLayoutLoginRoute
  '/server-activation': typeof publicGridLayoutServerActivationRoute
  '/settings/general': typeof privateUnscopedSettingsGeneralRoute
  '/settings/members': typeof privateUnscopedSettingsMembersRoute
  '/components': typeof privateUnscopedComponentsIndexRoute
  '/projects/$project_id': typeof privateScopedProjectsProject_idIndexLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(private)': typeof privateRouteWithChildren
  '/(private)/_unscoped': typeof privateUnscopedRouteWithChildren
  '/(public)': typeof publicRouteWithChildren
  '/(public)/_grid-layout': typeof publicGridLayoutRouteWithChildren
  '/(private)/': typeof privateIndexRoute
  '/(private)/_unscoped/projects': typeof privateUnscopedProjectsRoute
  '/(public)/_grid-layout/login': typeof publicGridLayoutLoginRoute
  '/(public)/_grid-layout/server-activation': typeof publicGridLayoutServerActivationRoute
  '/(private)/_scoped/projects/$project_id': typeof privateScopedProjectsProject_idRouteWithChildren
  '/(private)/_unscoped/settings/general': typeof privateUnscopedSettingsGeneralRoute
  '/(private)/_unscoped/settings/members': typeof privateUnscopedSettingsMembersRoute
  '/(private)/_unscoped/components/': typeof privateUnscopedComponentsIndexRoute
  '/(private)/_scoped/projects/$project_id/': typeof privateScopedProjectsProject_idIndexLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/projects'
    | '/login'
    | '/server-activation'
    | '/projects/$project_id'
    | '/settings/general'
    | '/settings/members'
    | '/components'
    | '/projects/$project_id/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/projects'
    | '/login'
    | '/server-activation'
    | '/settings/general'
    | '/settings/members'
    | '/components'
    | '/projects/$project_id'
  id:
    | '__root__'
    | '/(private)'
    | '/(private)/_unscoped'
    | '/(public)'
    | '/(public)/_grid-layout'
    | '/(private)/'
    | '/(private)/_unscoped/projects'
    | '/(public)/_grid-layout/login'
    | '/(public)/_grid-layout/server-activation'
    | '/(private)/_scoped/projects/$project_id'
    | '/(private)/_unscoped/settings/general'
    | '/(private)/_unscoped/settings/members'
    | '/(private)/_unscoped/components/'
    | '/(private)/_scoped/projects/$project_id/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  privateRoute: typeof privateRouteWithChildren
  publicRoute: typeof publicRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(public)': {
      id: '/(public)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(private)': {
      id: '/(private)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof privateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(private)/': {
      id: '/(private)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof privateIndexRouteImport
      parentRoute: typeof privateRoute
    }
    '/(public)/_grid-layout': {
      id: '/(public)/_grid-layout'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicGridLayoutRouteImport
      parentRoute: typeof publicRoute
    }
    '/(private)/_unscoped': {
      id: '/(private)/_unscoped'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof privateUnscopedRouteImport
      parentRoute: typeof privateRoute
    }
    '/(public)/_grid-layout/server-activation': {
      id: '/(public)/_grid-layout/server-activation'
      path: '/server-activation'
      fullPath: '/server-activation'
      preLoaderRoute: typeof publicGridLayoutServerActivationRouteImport
      parentRoute: typeof publicGridLayoutRoute
    }
    '/(public)/_grid-layout/login': {
      id: '/(public)/_grid-layout/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof publicGridLayoutLoginRouteImport
      parentRoute: typeof publicGridLayoutRoute
    }
    '/(private)/_unscoped/projects': {
      id: '/(private)/_unscoped/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof privateUnscopedProjectsRouteImport
      parentRoute: typeof privateUnscopedRoute
    }
    '/(private)/_unscoped/components/': {
      id: '/(private)/_unscoped/components/'
      path: '/components'
      fullPath: '/components'
      preLoaderRoute: typeof privateUnscopedComponentsIndexRouteImport
      parentRoute: typeof privateUnscopedRoute
    }
    '/(private)/_unscoped/settings/members': {
      id: '/(private)/_unscoped/settings/members'
      path: '/settings/members'
      fullPath: '/settings/members'
      preLoaderRoute: typeof privateUnscopedSettingsMembersRouteImport
      parentRoute: typeof privateUnscopedRoute
    }
    '/(private)/_unscoped/settings/general': {
      id: '/(private)/_unscoped/settings/general'
      path: '/settings/general'
      fullPath: '/settings/general'
      preLoaderRoute: typeof privateUnscopedSettingsGeneralRouteImport
      parentRoute: typeof privateUnscopedRoute
    }
    '/(private)/_scoped/projects/$project_id': {
      id: '/(private)/_scoped/projects/$project_id'
      path: '/projects/$project_id'
      fullPath: '/projects/$project_id'
      preLoaderRoute: typeof privateScopedProjectsProject_idRouteImport
      parentRoute: typeof privateRoute
    }
    '/(private)/_scoped/projects/$project_id/': {
      id: '/(private)/_scoped/projects/$project_id/'
      path: '/'
      fullPath: '/projects/$project_id/'
      preLoaderRoute: typeof privateScopedProjectsProject_idIndexLazyRouteImport
      parentRoute: typeof privateScopedProjectsProject_idRoute
    }
  }
}

interface privateUnscopedRouteChildren {
  privateUnscopedProjectsRoute: typeof privateUnscopedProjectsRoute
  privateUnscopedSettingsGeneralRoute: typeof privateUnscopedSettingsGeneralRoute
  privateUnscopedSettingsMembersRoute: typeof privateUnscopedSettingsMembersRoute
  privateUnscopedComponentsIndexRoute: typeof privateUnscopedComponentsIndexRoute
}

const privateUnscopedRouteChildren: privateUnscopedRouteChildren = {
  privateUnscopedProjectsRoute: privateUnscopedProjectsRoute,
  privateUnscopedSettingsGeneralRoute: privateUnscopedSettingsGeneralRoute,
  privateUnscopedSettingsMembersRoute: privateUnscopedSettingsMembersRoute,
  privateUnscopedComponentsIndexRoute: privateUnscopedComponentsIndexRoute,
}

const privateUnscopedRouteWithChildren = privateUnscopedRoute._addFileChildren(
  privateUnscopedRouteChildren,
)

interface privateScopedProjectsProject_idRouteChildren {
  privateScopedProjectsProject_idIndexLazyRoute: typeof privateScopedProjectsProject_idIndexLazyRoute
}

const privateScopedProjectsProject_idRouteChildren: privateScopedProjectsProject_idRouteChildren =
  {
    privateScopedProjectsProject_idIndexLazyRoute:
      privateScopedProjectsProject_idIndexLazyRoute,
  }

const privateScopedProjectsProject_idRouteWithChildren =
  privateScopedProjectsProject_idRoute._addFileChildren(
    privateScopedProjectsProject_idRouteChildren,
  )

interface privateRouteChildren {
  privateUnscopedRoute: typeof privateUnscopedRouteWithChildren
  privateIndexRoute: typeof privateIndexRoute
  privateScopedProjectsProject_idRoute: typeof privateScopedProjectsProject_idRouteWithChildren
}

const privateRouteChildren: privateRouteChildren = {
  privateUnscopedRoute: privateUnscopedRouteWithChildren,
  privateIndexRoute: privateIndexRoute,
  privateScopedProjectsProject_idRoute:
    privateScopedProjectsProject_idRouteWithChildren,
}

const privateRouteWithChildren =
  privateRoute._addFileChildren(privateRouteChildren)

interface publicGridLayoutRouteChildren {
  publicGridLayoutLoginRoute: typeof publicGridLayoutLoginRoute
  publicGridLayoutServerActivationRoute: typeof publicGridLayoutServerActivationRoute
}

const publicGridLayoutRouteChildren: publicGridLayoutRouteChildren = {
  publicGridLayoutLoginRoute: publicGridLayoutLoginRoute,
  publicGridLayoutServerActivationRoute: publicGridLayoutServerActivationRoute,
}

const publicGridLayoutRouteWithChildren =
  publicGridLayoutRoute._addFileChildren(publicGridLayoutRouteChildren)

interface publicRouteChildren {
  publicGridLayoutRoute: typeof publicGridLayoutRouteWithChildren
}

const publicRouteChildren: publicRouteChildren = {
  publicGridLayoutRoute: publicGridLayoutRouteWithChildren,
}

const publicRouteWithChildren =
  publicRoute._addFileChildren(publicRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  privateRoute: privateRouteWithChildren,
  publicRoute: publicRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
