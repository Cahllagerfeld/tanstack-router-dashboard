/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as privateIndexImport } from './routes/(private)/index'
import { Route as publicGridLayoutImport } from './routes/(public)/_grid-layout'
import { Route as privateProjectidImport } from './routes/(private)/$project_id'
import { Route as publicGridLayoutServerActivationImport } from './routes/(public)/_grid-layout/server-activation'
import { Route as publicGridLayoutLoginImport } from './routes/(public)/_grid-layout/login'
import { Route as privateProjectidComponentsIndexImport } from './routes/(private)/$project_id/components/index'

// Create Virtual Routes

const publicImport = createFileRoute('/(public)')()
const privateProjectidIndexLazyImport = createFileRoute(
  '/(private)/$project_id/',
)()

// Create/Update Routes

const publicRoute = publicImport.update({
  id: '/(public)',
  getParentRoute: () => rootRoute,
} as any)

const privateIndexRoute = privateIndexImport.update({
  id: '/(private)/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const publicGridLayoutRoute = publicGridLayoutImport.update({
  id: '/_grid-layout',
  getParentRoute: () => publicRoute,
} as any)

const privateProjectidRoute = privateProjectidImport
  .update({
    id: '/(private)/$project_id',
    path: '/$project_id',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() =>
    import('./routes/(private)/$project_id.lazy').then((d) => d.Route),
  )

const privateProjectidIndexLazyRoute = privateProjectidIndexLazyImport
  .update({
    id: '/',
    path: '/',
    getParentRoute: () => privateProjectidRoute,
  } as any)
  .lazy(() =>
    import('./routes/(private)/$project_id/index.lazy').then((d) => d.Route),
  )

const publicGridLayoutServerActivationRoute =
  publicGridLayoutServerActivationImport
    .update({
      id: '/server-activation',
      path: '/server-activation',
      getParentRoute: () => publicGridLayoutRoute,
    } as any)
    .lazy(() =>
      import('./routes/(public)/_grid-layout/server-activation.lazy').then(
        (d) => d.Route,
      ),
    )

const publicGridLayoutLoginRoute = publicGridLayoutLoginImport
  .update({
    id: '/login',
    path: '/login',
    getParentRoute: () => publicGridLayoutRoute,
  } as any)
  .lazy(() =>
    import('./routes/(public)/_grid-layout/login.lazy').then((d) => d.Route),
  )

const privateProjectidComponentsIndexRoute =
  privateProjectidComponentsIndexImport
    .update({
      id: '/components/',
      path: '/components/',
      getParentRoute: () => privateProjectidRoute,
    } as any)
    .lazy(() =>
      import('./routes/(private)/$project_id/components/index.lazy').then(
        (d) => d.Route,
      ),
    )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(private)/$project_id': {
      id: '/(private)/$project_id'
      path: '/$project_id'
      fullPath: '/$project_id'
      preLoaderRoute: typeof privateProjectidImport
      parentRoute: typeof rootRoute
    }
    '/(public)': {
      id: '/(public)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicImport
      parentRoute: typeof rootRoute
    }
    '/(public)/_grid-layout': {
      id: '/(public)/_grid-layout'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicGridLayoutImport
      parentRoute: typeof publicRoute
    }
    '/(private)/': {
      id: '/(private)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof privateIndexImport
      parentRoute: typeof rootRoute
    }
    '/(public)/_grid-layout/login': {
      id: '/(public)/_grid-layout/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof publicGridLayoutLoginImport
      parentRoute: typeof publicGridLayoutImport
    }
    '/(public)/_grid-layout/server-activation': {
      id: '/(public)/_grid-layout/server-activation'
      path: '/server-activation'
      fullPath: '/server-activation'
      preLoaderRoute: typeof publicGridLayoutServerActivationImport
      parentRoute: typeof publicGridLayoutImport
    }
    '/(private)/$project_id/': {
      id: '/(private)/$project_id/'
      path: '/'
      fullPath: '/$project_id/'
      preLoaderRoute: typeof privateProjectidIndexLazyImport
      parentRoute: typeof privateProjectidImport
    }
    '/(private)/$project_id/components/': {
      id: '/(private)/$project_id/components/'
      path: '/components'
      fullPath: '/$project_id/components'
      preLoaderRoute: typeof privateProjectidComponentsIndexImport
      parentRoute: typeof privateProjectidImport
    }
  }
}

// Create and export the route tree

interface privateProjectidRouteChildren {
  privateProjectidIndexLazyRoute: typeof privateProjectidIndexLazyRoute
  privateProjectidComponentsIndexRoute: typeof privateProjectidComponentsIndexRoute
}

const privateProjectidRouteChildren: privateProjectidRouteChildren = {
  privateProjectidIndexLazyRoute: privateProjectidIndexLazyRoute,
  privateProjectidComponentsIndexRoute: privateProjectidComponentsIndexRoute,
}

const privateProjectidRouteWithChildren =
  privateProjectidRoute._addFileChildren(privateProjectidRouteChildren)

interface publicGridLayoutRouteChildren {
  publicGridLayoutLoginRoute: typeof publicGridLayoutLoginRoute
  publicGridLayoutServerActivationRoute: typeof publicGridLayoutServerActivationRoute
}

const publicGridLayoutRouteChildren: publicGridLayoutRouteChildren = {
  publicGridLayoutLoginRoute: publicGridLayoutLoginRoute,
  publicGridLayoutServerActivationRoute: publicGridLayoutServerActivationRoute,
}

const publicGridLayoutRouteWithChildren =
  publicGridLayoutRoute._addFileChildren(publicGridLayoutRouteChildren)

interface publicRouteChildren {
  publicGridLayoutRoute: typeof publicGridLayoutRouteWithChildren
}

const publicRouteChildren: publicRouteChildren = {
  publicGridLayoutRoute: publicGridLayoutRouteWithChildren,
}

const publicRouteWithChildren =
  publicRoute._addFileChildren(publicRouteChildren)

export interface FileRoutesByFullPath {
  '/$project_id': typeof privateProjectidRouteWithChildren
  '/': typeof privateIndexRoute
  '/login': typeof publicGridLayoutLoginRoute
  '/server-activation': typeof publicGridLayoutServerActivationRoute
  '/$project_id/': typeof privateProjectidIndexLazyRoute
  '/$project_id/components': typeof privateProjectidComponentsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof privateIndexRoute
  '/login': typeof publicGridLayoutLoginRoute
  '/server-activation': typeof publicGridLayoutServerActivationRoute
  '/$project_id': typeof privateProjectidIndexLazyRoute
  '/$project_id/components': typeof privateProjectidComponentsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(private)/$project_id': typeof privateProjectidRouteWithChildren
  '/(public)': typeof publicRouteWithChildren
  '/(public)/_grid-layout': typeof publicGridLayoutRouteWithChildren
  '/(private)/': typeof privateIndexRoute
  '/(public)/_grid-layout/login': typeof publicGridLayoutLoginRoute
  '/(public)/_grid-layout/server-activation': typeof publicGridLayoutServerActivationRoute
  '/(private)/$project_id/': typeof privateProjectidIndexLazyRoute
  '/(private)/$project_id/components/': typeof privateProjectidComponentsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/$project_id'
    | '/'
    | '/login'
    | '/server-activation'
    | '/$project_id/'
    | '/$project_id/components'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/server-activation'
    | '/$project_id'
    | '/$project_id/components'
  id:
    | '__root__'
    | '/(private)/$project_id'
    | '/(public)'
    | '/(public)/_grid-layout'
    | '/(private)/'
    | '/(public)/_grid-layout/login'
    | '/(public)/_grid-layout/server-activation'
    | '/(private)/$project_id/'
    | '/(private)/$project_id/components/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  privateProjectidRoute: typeof privateProjectidRouteWithChildren
  publicRoute: typeof publicRouteWithChildren
  privateIndexRoute: typeof privateIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  privateProjectidRoute: privateProjectidRouteWithChildren,
  publicRoute: publicRouteWithChildren,
  privateIndexRoute: privateIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(private)/$project_id",
        "/(public)",
        "/(private)/"
      ]
    },
    "/(private)/$project_id": {
      "filePath": "(private)/$project_id.tsx",
      "children": [
        "/(private)/$project_id/",
        "/(private)/$project_id/components/"
      ]
    },
    "/(public)": {
      "filePath": "(public)",
      "children": [
        "/(public)/_grid-layout"
      ]
    },
    "/(public)/_grid-layout": {
      "filePath": "(public)/_grid-layout.tsx",
      "parent": "/(public)",
      "children": [
        "/(public)/_grid-layout/login",
        "/(public)/_grid-layout/server-activation"
      ]
    },
    "/(private)/": {
      "filePath": "(private)/index.tsx"
    },
    "/(public)/_grid-layout/login": {
      "filePath": "(public)/_grid-layout/login.tsx",
      "parent": "/(public)/_grid-layout"
    },
    "/(public)/_grid-layout/server-activation": {
      "filePath": "(public)/_grid-layout/server-activation.tsx",
      "parent": "/(public)/_grid-layout"
    },
    "/(private)/$project_id/": {
      "filePath": "(private)/$project_id/index.lazy.tsx",
      "parent": "/(private)/$project_id"
    },
    "/(private)/$project_id/components/": {
      "filePath": "(private)/$project_id/components/index.tsx",
      "parent": "/(private)/$project_id"
    }
  }
}
ROUTE_MANIFEST_END */
